<!--

  markup_qa.ent - contains general entity declarations (replacement
    text) for use with internal workflow documentation, Digital
    Library Production Services (DLPS), University of Virginia Library

  Greg Murray <gpm2a@virginia.edu>, DLPS
  Last modified: 2006-03-29

-->

<!ENTITY qa_commandline_script '<xref type="scripts">qa_books</xref>'>

<!ENTITY parse '<item>Validate, and fix any validation errors</item>'>

<!ENTITY warnings_vs_errors '
Messages with <code>WARNING</code> indicate possible problems that
should be investigated, and fixed if necessary. <code>ERROR</code>
messages indicate markup errors that should always be fixed.

<admon type="important"><p>An <code>ERROR</code> message from a QA
script should be considered <emph>just as serious</emph> as a
validation error from the XML parser. The only difference is that some
markup rules are enforced by the DTD, while others are enforced by the
QA programs.</p></admon>
'>

<!-- ====================================================================== -->

<!ENTITY initial_steps '
<head>Initial steps</head>
<list>

<item>To see which files are ready for markup QA, look in
<path>59processed</path>. <emph>Move</emph> (do not copy) files from
<path>59processed</path> to
<path>&text_dir;/04postkb/60being_markup_checked/to_be_checked</path></item>

<item>To begin working on an individual file, <emph>move</emph> (do
not copy) the file from <path>to_be_checked</path> to your working
directory</item>

<item>Open the file in oXygen. Validate the document and fix any
errors.</item>

<item>Check the vendor&apos;s "readme" file (if any) for problems the
vendor encountered. Fix as needed. (These files can be found in a
subdirectory of <path>10received</path> and are named
<code>[ID]_readme.txt</code>, but they are present only if the vendor
had any problems worth noting; otherwise, there won&apos;t be a readme
file at all.)
</item>
</list>
'>

<!-- ====================================================================== -->

<!ENTITY unknown_chars '
<head>Unknown characters</head>

<p>Apex uses <val>[UNK]</val> or <val>&amp;unknown;</val> to indicate
unknown characters &mdash; characters that the keyboarders were unable
to identify.</p>

<list>
<item>To find unknown characters, choose one of the following:
  <list>
  <item>If working from the command line: <command><xref type="scripts">find_unknown_chars</xref> &files;</command></item>
  <item>If working in oXygen:
    <list>
    <item>Search for <val>[UNK]</val></item>
    <item>Search for <val>&amp;lsqb;UNK&amp;rsqb;</val></item>
    <item>Search for <val>&amp;unknown;</val></item>
    </list>
  </item>
  </list>
</item>
<item>If any unknown characters are found:

  <list>
  <item>View the page image to see what the character looks like</item>

  <item>Refer to the Unicode code charts at
  <xref type="external" url="http://www.unicode.org/charts/">http://www.unicode.org/charts/</xref>
  and identify the appropriate Unicode character.

  <admon type="tip">
  <p>Often you can tell which code chart(s) to look in first simply by
  reading the names of the code charts. For example, if you know it&apos;s a
  Greek character, look at the <gizmo>Greek and Coptic</gizmo> code
  chart.</p>

  <p>If you can&apos;t find the character, try searching the
  <xref type="external" url="http://www.unicode.org/Public/UNIDATA/NamesList.txt">Unicode Names List</xref>
  for a word that would likely be in the character description.</p>
  </admon>
  </item>

  <item>When you find the character in the Unicode system, make a note
  of its numeric code. (If you can&apos;t find the character in
  Unicode, please contact Greg; there may be other ways of tracking it
  down.)</item>

  <item>
  <p>In the XML file, replace the <code>[UNK]</code> or
  <code>&amp;unknown;</code> marker with the Unicode numeric code,
  preceded by <code>&amp;#x</code> and followed by a semicolon
  <code>;</code>.</p>

  <p>For example, if you determine that the unknown character is the
  Arabic alef character, you would look in the <gizmo>Arabic</gizmo>
  Unicode code chart, where the character described as "ARABIC LETTER
  ALEF" is assigned the numeric code of 0627, so you would replace the
  <code>[UNK]</code> marker with <code>&amp;#x0627;</code></p>
  </item>

  &parse;

  <item>Update the &tracksys_xref; to indicate completion of this
  step (Markup QA Workflow &rarr; Fix unknown characters):
  <command><xref type="scripts">update_tracksys</xref> -s chars &files;</command></item>

  </list>
</item>
</list>
'>

<!-- ====================================================================== -->
<!--
<!ENTITY property_sheet_format '
<label>Format</label><item>Add <code>&lt;?dlps ...?&gt;</code>
processing instructions &mdash; collectively referred to as the DLPS
property sheet &mdash; immediately under the <code>&lt;?xml
...?&gt;</code> declaration using this format:
<eg><![CDATA[
<?dlps id="[DLPS ID]"?>
<?dlps page-images="[bitonal | color | no]" figure-images="[yes | no]"?>
<?dlps transcription="[yes | no]"?>
]]></eg>
For example:
<eg><![CDATA[
<?dlps id="b123456789"?>
<?dlps page-images="bitonal" figure-images="no"?>
<?dlps transcription="yes"?>
]]></eg>
</item>
'>
-->
<!-- ====================================================================== -->
<!--
<!ENTITY property_sheet_project '
<label>Project</label>
<item>If the text is associated with a project other than normal DLPS
production, indicate it with the <att>project</att> attribute
(otherwise, omit the <att>project</att> attribute altogether). Such
projects include:
  <list>
  <label><code>amstudies</code></label><item>American Studies</item>
  <label><code>vcdh</code></label><item>Virginia Center for Digital History</item>
  <label><code>kinney</code></label><item>Anne Kinney&apos;s Chinese texts</item>
  </list>
</item>
'>
-->
<!-- ====================================================================== -->
<!--
<!ENTITY property_sheet_figures '
<label>Figure images</label>
<item>To determine whether a text has any figure images associated
with it:
  <list>
  <item>Search for figure tags: use <val>&lt;figure</val> as the
  search phrase, check "Find in tags", and click the "Find all"
  button</item>

  <item>If there are no search results, or if the search results only
  show <gi>figure</gi> tags with page-image entity values, then
  there are no figure images associated with this text. Set
  <code>figure-images="no"</code> in the property sheet.

  <admon type="note"><p>A <emph>page-image</emph> entity value
  consists of the DLPS ID, an underscore, and a 4-digit sequence
  number &mdash; for example, <code>b123456789_0001</code>. A
  <emph>figure-image</emph> entity value ends with an underscore and a
  single digit &mdash; for example,
  <code>b123456789_0001_0</code> (for a full-page figure) or
  <code>b123456789_0001_1</code> (for a block or inline
  figure).</p></admon>

  </item>

  <item>If any search results show <att>entity</att> attributes with a
  figure-image entity value (a value ending with an underscore and a
  single digit), then this text has figure images associated with
  it. Set <code>figure-images="yes"</code> in the property
  sheet.</item>

  </list>
</item>
'>
-->
<!-- ====================================================================== -->

<!ENTITY teiHeader_revisionDesc '
<label>Revision history</label>
<item>Add <gi>revisionDesc</gi> to the TEI header: <command><xref type="scripts">revdesc</xref> &files;</command>

<admon type="note"><p>This script uses the boilerplate description
"Minor corrections to vendor markup." If you make significant changes
to the markup, edit the file to change the <gi>revisionDesc</gi> as
appropriate.</p></admon>

<admon type="fyi"><p>If run successfully, this script automatically
updates the &tracksys_xref; to indicate completion of this step
(Markup QA Workflow &rarr; Add revision history).</p></admon>

</item>
'>

<!-- ====================================================================== -->

<!ENTITY divs_structure '
<label>Overall div structure</label>
<item>Check/correct the vendor&apos;s overall div choices.
  <list>
  <item>To see the document&apos;s current div structure, run this command
  from the Unix command line:

  <eg><xref type="scripts">refresh_preview</xref> <replace>filename</replace></eg>

  (This command copies your file where the TEI Preview tool can
  display it.) Then use &tei_preview_xref; to view the div
  structure.</item>

  <item>To assess what the div structure <emph>should</emph> be, refer
  to the printed table of contents and other page images using the
  &proofreader_xref;.</item>
  </list>
</item>
'>

<!-- ====================================================================== -->

<!ENTITY divs_types '
<label>Div types</label>
<item>Check/correct <att>type</att> attribute values.

  <p>The keyboarding vendor does not always make good choices when
  determining the <att>type</att> of a structural division. In
  particular, watch for problems with the generic type values
  <val>section</val> and <val>subsection</val>:</p>

  <list>
  <item>In some cases, the vendor will use <val>section</val> or
  <val>subsection</val> when a more specific label (such as
  <val>chapter</val>, <val>foreword</val>, <val>bibliography</val>,
  etc. etc.) is applicable. In this case, use the more specific
  label.</item>

  <item>In other cases, the vendor will assign a specific label when
  the label is not really applicable. In this case, use
  <val>section</val> or, if <val>section</val> has already been used
  for a higher-level div, use <val>subsection</val>.</item>
  </list>
</item>
'>

<!-- ====================================================================== -->

<!ENTITY divs_view_changes '
<label>View changes</label>
<item>
  <list>
  <item>If you made any changes to the div structures, update the div
IDs with this command-line script: <command><xref type="scripts">div_ids</xref>
<replace>filename</replace></command></item>
  <item>To see your changes, run <command><xref type="scripts">refresh_preview</xref>
<replace>filename</replace></command> to re-copy your file to the TEI
Preview directory, and then use &tei_preview_xref; to view the div
structure</item>
  </list>
</item>
'>

<!-- ====================================================================== -->

<!ENTITY divs_update_tracksys '
<label>Update tracking system</label>
<item>Update the &tracksys_xref; to indicate completion of this
step (Markup QA Workflow &rarr; Fix div structure):
<command><xref type="scripts">update_tracksys</xref> -s divs &files;</command></item>
'>

<!-- ====================================================================== -->

<!ENTITY notes_multiple_refs '
<label>Check for multiple occurrences of the same note</label>

<item>In some cases, a single printed note will have multiple
references pointing to it. In such cases, if the note has been
transcribed multiple times, such that there is one <gi>note</gi> for
each <gi>ref</gi>, the markup needs to be changed as follows:

  <list>
  <item>Keep the first <gi>note</gi> element, but delete all
  subsequent <gi>note</gi> elements that repeat exactly the same
  printed note.</item>

  <item>Change the <att>target</att> attribute of each <gi>ref</gi>
  element to match the <att>id</att> attribute of the first
  <gi>note</gi> element. The end result is that every printed note is
  transcribed exactly once, and each <gi>ref</gi>
  points to its corresponding <gi>note</gi>, which accurately reflects
  what is printed.</item>
  </list>
</item>
'>

<!-- ====================================================================== -->

<!ENTITY notes_update_tracksys '
<label>Update tracking system</label>
<item>Update the &tracksys_xref; to indicate completion of this
step (Markup QA Workflow &rarr; Update notes):
<command><xref type="scripts">update_tracksys</xref> -s notes &files;</command></item>
'>

<!-- ====================================================================== -->

<!ENTITY qa_programs_commandline '
<label>Command-line QA programs</label>
<item>
  <list>
  <item>Save and validate the file in oXygen (if open)</item>
  <item>From the Unix command line, run the following script:

  <eg>&qa_commandline_script; <replace>filename</replace></eg>

  &warnings_vs_errors;

  <admon type="fyi"><p>If run successfully, the
  <command>&qa_commandline_script;</command> script automatically
  updates the &tracksys_xref; to indicate completion of this step
  (Markup QA Workflow &rarr; Run command-line programs).</p></admon>

  <admon type="special" applies="EAF">
    <p>When processing EAF XML files, also run this additional script:
    <command><xref type="scripts">qa_eaf_pb</xref> <replace>filename</replace></command></p>

    <p>The script finds consecutive page breaks, which typically
    indicate a page of missing text content. Check the XML file at the
    line numbers indicated in the <code>WARNING</code> messages. For
    each page of missing text content, insert a <gi>gap/</gi> tag in
    the XML file. In the <att>desc</att> attribute, indicate the
    printed page number of the page for which the text content is missing
    from the electronic text; for the <att>reason</att>, use
    <val>unknown</val>. For example:

    <eg>&lt;gap desc="page 17" reason="unknown"/&gt;</eg></p>
  </admon>

  </item>

  </list>
</item>
'>

<!-- ====================================================================== -->

<!ENTITY qa_programs_web '
<label>Web-based QA programs</label><item>
  <list>
  <item>Make the current version of the XML file available to the
  web-based markup QA programs:

  <eg><xref type="scripts">refresh_preview</xref> <replace>filename</replace></eg>

  </item>

  <item>In a web browser, go to &qa_programs_xref; and select your file.
  &warnings_vs_errors;
  </item>

  <item>After making corrections, run <command><xref type="scripts">refresh_preview</xref>
<replace>filename</replace></command>, then re-run the web-based QA
programs</item>

  <item>Continue this process until everything that should be fixed
has been fixed</item>

  <item>Update the &tracksys_xref; to indicate completion of this step
(Markup QA Workflow &rarr; Run web-based programs):
<command><xref type="scripts">update_tracksys</xref> -s web &files;</command></item>

  </list>
</item>
'>

<!-- ====================================================================== -->

<!ENTITY final_steps '
<label>Final steps</label>
<item>
  <list>
  <item>Save, validate, and close the file in oXygen (if open)</item>

  <item><emph>Move</emph> the file from your working directory to
  <path>&text_dir;/04postkb/60markup_checked</path></item>
  </list>
</item>
'>

<!-- ====================================================================== -->

<!ENTITY copy_to_69processed '
<div2>
<head>Copy to 69processed</head>
<list>
<item>Regardless of what the last step was for a particular file (for
example, newspapers receive spell-checking, most other files do not),
always <emph>copy</emph> the last version of the file to
<path>69processed</path>.</item>

<item>Update the &tracksys_xref;: Navigate to <path>69processed</path>
and run this command: <command><xref type="scripts">update_tracksys</xref> &files;</command></item>
</list>
</div2>
'>

<!-- ====================================================================== -->
