<?xml version="1.0" encoding="US-ASCII"?>

<!--
     dlps_epd.xsl - Transforms a TEI XML skeleton document, combined
                    with an Encoding Practices Documentation (epd)
                    document, to HTML for web display.
     Greg Murray <gpm2a@virginia.edu>
     2003-05-12
-->

<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">

<!-- INCLUDES -->

<!-- Here xsl:import is used, rather than xsl:include, so that in the
event of a template conflict this stylesheet's template will take
precedence over the imported template. This is useful for overriding a
template in tei_lib.xsl (a library of rather generic templates for
transforming TEI elements) with a more specific one within the current
stylesheet. -->

<xsl:import href="util_lib.xsl"/>
<xsl:import href="tei_lib.xsl"/>


<!-- OUTPUT -->
<xsl:output method="html" encoding="US-ASCII"/>


<!-- GLOBAL VARIABLES -->
<xsl:param name="mode">postkb</xsl:param>

<xsl:variable name="epd_filename">/cenrepo/bin/cgi-dl/dlps/dlpsdoc/text/practices/dlps_epd.xml</xsl:variable>
<xsl:variable name="epd" select="document($epd_filename)"/>


<!-- NAMED TEMPLATES -->

<xsl:template name="getCatLabel">
    <!-- converts 'category' and 'subcat' attribute values into labels for display -->
    <xsl:param name="string"/>
    <xsl:choose>
	<!-- category labels -->
	<xsl:when test="$string='general'">General Requirements</xsl:when>
	<xsl:when test="$string='structure'">Major Structure</xsl:when>
	<xsl:when test="$string='genres'">Genres</xsl:when>
	<xsl:when test="$string='block-level'">Block-level Features</xsl:when>
	<xsl:when test="$string='phrase-level'">Phrase-level Features</xsl:when>
	<xsl:when test="$string='refsys'">Reference Systems</xsl:when>
	<xsl:when test="$string='special'">Special Considerations</xsl:when>
	<xsl:when test="$string='correctEnhance'">Markup Correction and Enhancement</xsl:when>

	<!-- subcat labels -->
	<xsl:when test="$string='xml'">XML</xsl:when>
	<xsl:when test="$string='essential'">Essential Structure</xsl:when>
	<xsl:when test="$string='divs'">Structural Divisions</xsl:when>
	<xsl:when test="$string='heads'">Division Headings</xsl:when>
	<xsl:when test="$string='titlePage'">Title Pages</xsl:when>
	<xsl:when test="$string='letters'">Letters</xsl:when>
	<xsl:when test="$string='verse'">Verse</xsl:when>
	<xsl:when test="$string='drama'">Drama</xsl:when>
	<xsl:when test="$string='news'">Newspapers</xsl:when>
	<xsl:when test="$string='encyc'">Encyclopedias</xsl:when>
	<xsl:when test="$string='dict'">Dictionaries</xsl:when>
	<xsl:when test="$string='quotations'">Block Quotations</xsl:when>
	<xsl:when test="$string='figures'">Figures and Ornaments</xsl:when>
	<xsl:when test="$string='tables'">Tables</xsl:when>
	<xsl:when test="$string='lists'">Lists</xsl:when>
	<xsl:when test="$string='notes'">Notes</xsl:when>
	<xsl:when test="$string='misc'">Other Features</xsl:when>
	<xsl:when test="$string='typeface'">Changes in Typeface</xsl:when>
	<xsl:when test="$string='alignIndent'">Alignment and Indentation</xsl:when>
	<xsl:when test="$string='foreign'">Foreign Phrases</xsl:when>
	<xsl:when test="$string='punctuation'">Punctuation</xsl:when>
	<xsl:when test="$string='dates'">Dates</xsl:when>
	<xsl:when test="$string='pb'">Page Breaks</xsl:when>
	<xsl:when test="$string='cb'">Column Breaks</xsl:when>
	<xsl:when test="$string='lb'">Line Breaks</xsl:when>
	<xsl:when test="$string='gaps'">Gaps and Uncertainties</xsl:when>
	<xsl:when test="$string='arbitrary'">Arbitrary Sections</xsl:when>
	<xsl:when test="$string='charent'">Special Characters</xsl:when>
	<xsl:when test="$string='corrections'">Corrections</xsl:when>

	<xsl:otherwise><xsl:value-of select="$string"/></xsl:otherwise>
    </xsl:choose>
</xsl:template>


<!-- TOP-LEVEL TEMPLATE -->

<xsl:template match="/">
    <!-- get document title; if none, supply default value -->
    <xsl:variable name="title">
	<xsl:choose>
	    <xsl:when test="TEI.2/teiHeader/fileDesc/titleStmt/title">
		<xsl:value-of select="TEI.2/teiHeader/fileDesc/titleStmt/title"/>
	    </xsl:when>
	    <xsl:otherwise>
		<xsl:text>Encoding Practices Documentation</xsl:text>
	    </xsl:otherwise>
	</xsl:choose>
    </xsl:variable>

    <xsl:text disable-output-escaping="yes">&lt;!--
**********************************************************************
DO NOT EDIT THIS FILE. This file was dynamically generated. Instead,
edit the Encoding Practices Documentation (epd) XML file from which
this HTML file was derived: </xsl:text><xsl:value-of select="$epd_filename"/><xsl:text disable-output-escaping="yes">
**********************************************************************
--&gt;

</xsl:text>

    <html>
	<head>
	    <title><xsl:value-of select="$title"/></title>
	    <link rel="stylesheet" type="text/css" href="http://text.lib.virginia.edu/bin/cgi-dl/dlps/css/epd.css"/>
	</head>
	<body>
	    <h1><xsl:value-of select="$title"/></h1>
	    <xsl:apply-templates select="TEI.2/text/body/argument"/>
	    <xsl:apply-templates select="TEI.2/teiHeader"/>
	    <hr/>
	    <h2>Contents</h2>
	    <ul>
	    <xsl:apply-templates select="TEI.2/text/body/div1" mode="toc"/>
	    </ul>
	    <hr/>
	    <xsl:apply-templates select="TEI.2/text/body/div1"/>
	</body>
    </html>
    <xsl:text>
</xsl:text>
</xsl:template>


<!-- TEI HEADER TEMPLATES -->

<xsl:template match="fileDesc">
    <table>
    <xsl:if test="titleStmt/author">
	<tr><th align="right">Author:</th><td><xsl:apply-templates select="titleStmt/author"/></td></tr>
    </xsl:if>
    <xsl:if test="titleStmt/respStmt">
	<xsl:for-each select="titleStmt/respStmt">
	    <tr><th align="right"><xsl:value-of select="resp"/></th><td><xsl:value-of select="name"/></td></tr>
	</xsl:for-each>
    </xsl:if>
    <tr><th align="right">Last modified:</th>
	<td><xsl:text disable-output-escaping="yes">&lt;!--#echo var="LAST_MODIFIED"--&gt;</xsl:text></td></tr>
    </table>
</xsl:template>


<!-- TABLE OF CONTENTS -->

<xsl:template match="div1" mode="toc">
    <li><a><xsl:attribute name="href"><xsl:value-of select="concat('#', @id)"/></xsl:attribute>
	<xsl:apply-templates select="head" mode="toc"/></a>
	<ul>
	<xsl:apply-templates select="div2" mode="toc"/>
	</ul>
    </li>
</xsl:template>

<xsl:template match="div2" mode="toc">
    <li><a><xsl:attribute name="href"><xsl:value-of select="concat('#', @id)"/></xsl:attribute>
	<xsl:apply-templates select="head" mode="toc"/></a></li>
</xsl:template>

<xsl:template match="head" mode="toc">
    <xsl:apply-templates/>
</xsl:template>


<!-- STRUCTURAL DIVISION TEMPLATES -->

<xsl:template match="div1">
    <xsl:variable name="n" select="@n"/>
    <a>
    <xsl:attribute name="name"><xsl:value-of select="@id"/></xsl:attribute>
    </a>

    <!-- process any children of this <div1>, such as <head>, <argument>, and <div2> -->
    <xsl:apply-templates/>

    <!-- also process any practiceDoc elements for this category but with no subcategory -->
    <xsl:apply-templates select="$epd/epd/practiceDoc[@category=$n][not(@subcat)][@app='global' or @app=$mode]"/>
    <hr/>
</xsl:template>

<xsl:template match="div2">
    <xsl:variable name="n" select="@n"/>
    <a>
    <xsl:attribute name="name"><xsl:value-of select="@id"/></xsl:attribute>
    </a>

    <!-- process any children of this <div2>, such as <head> and <argument> -->
    <xsl:apply-templates/>

    <!-- process practiceDoc elements for this subcategory -->
    <xsl:apply-templates select="$epd/epd/practiceDoc[@subcat=$n][@app='global' or @app=$mode]"/>
</xsl:template>


<!-- BLOCK-LEVEL ELEMENT TEMPLATES -->

<xsl:template match="head">
    <xsl:choose>
	<xsl:when test="local-name(..)='div1'">
	    <h2><xsl:apply-templates/></h2>
	</xsl:when>
	<xsl:when test="local-name(..)='div2'">
	    <h3><xsl:apply-templates/></h3>
	</xsl:when>
	<xsl:otherwise>
	    <p><b><xsl:apply-templates/></b></p>
	</xsl:otherwise>
    </xsl:choose>
</xsl:template>

<xsl:template match="head" mode="string">
    <xsl:apply-templates/>
</xsl:template>

<xsl:template match="practiceDoc">
    <xsl:if test="@id">
	<a><xsl:attribute name="name"><xsl:value-of select="@id"/></xsl:attribute></a>
    </xsl:if>
    <table border="1" width="100%" cellpadding="8">
	<xsl:apply-templates/>
    </table>
    <br/><br/>
</xsl:template>

<xsl:template match="rs">
    <tr><td colspan="2" class="headrow">
	<table width="100%"><tr><td class="headrow"><xsl:apply-templates/></td>
	<td class="headrow" align="right">
	    <xsl:call-template name="getCatLabel">
		<xsl:with-param name="string"><xsl:value-of select="../@category"/></xsl:with-param>
	    </xsl:call-template>
	    <xsl:if test="../@subcat">
		<xsl:text>: </xsl:text>
		<xsl:call-template name="getCatLabel">
		    <xsl:with-param name="string"><xsl:value-of select="../@subcat"/></xsl:with-param>
		</xsl:call-template>
	    </xsl:if>
	</td></tr></table>
    </td></tr>
</xsl:template>

<!-- The following is useful when you just want the string value of <rs>, as the title of the practice. -->
<xsl:template match="rs" mode="string">
    <xsl:apply-templates/>
</xsl:template>

<xsl:template match="desc">
    <xsl:if test="@app='global' or @app=$mode">
	<tr><th width="10%" align="right" valign="top">Description</th><td><xsl:apply-templates/></td></tr>
    </xsl:if>
</xsl:template>

<xsl:template match="remarks">
    <tr><th align="right" valign="top">Remarks</th><td><xsl:apply-templates/></td></tr>
</xsl:template>

<xsl:template match="exemplum">
    <xsl:if test="@app='global' or @app=$mode">
	<xsl:choose>
	    <xsl:when test="local-name(..)='practiceDoc'">
		<tr><th align="right" valign="top">Example</th><td><xsl:apply-templates/></td></tr>
	    </xsl:when>
	    <xsl:otherwise>
		<xsl:apply-templates/>
	    </xsl:otherwise>
	</xsl:choose>
    </xsl:if>
</xsl:template>

<xsl:template match="eg">
    <xsl:if test="@app='global' or @app=$mode">
	<pre><xsl:value-of select="."/></pre>
    </xsl:if>
</xsl:template>

<!--
<xsl:template match="figure">
    <p><a target="examples">
	<xsl:attribute name="href"><xsl:value-of select="@url"/></xsl:attribute>
	<xsl:choose>
	    <xsl:when test="head">
		<xsl:value-of select="head"/>
	    </xsl:when>
	    <xsl:otherwise>
		<xsl:text>page image</xsl:text>
	    </xsl:otherwise>
	</xsl:choose>
    </a></p>
</xsl:template>
-->

<xsl:template match="admon">
    <div>
	<xsl:attribute name="class"><xsl:value-of select="@type"/></xsl:attribute>
	<span>
	    <xsl:attribute name="class"><xsl:value-of select="@type"/></xsl:attribute>
	    <xsl:call-template name="uc">
		<xsl:with-param name="string"><xsl:value-of select="@type"/></xsl:with-param>
	    </xsl:call-template>
	</span>
	<xsl:apply-templates/>
    </div>
</xsl:template>

<xsl:template match="enforce">
    <tr><th align="right" valign="top">Enforcement</th>
	<td>Machine-enforceable: <xsl:value-of select="@enforceable"/>
	<xsl:if test="@enforceable != @enforced">
	    <br/>Enforced: <xsl:value-of select="@enforced"/>
	</xsl:if>
	<xsl:if test="@method">
	    <br/><xsl:text>Method: </xsl:text>
	    <xsl:choose>
		<xsl:when test="@method='dtd'">DTD</xsl:when>
		<xsl:when test="@method='program'">Program</xsl:when>
		<xsl:otherwise><xsl:value-of select="@method"/></xsl:otherwise>
	    </xsl:choose>
	</xsl:if>
	<xsl:if test="@method-name"><br/>Name: <xsl:value-of select="@method-name"/></xsl:if>
	<xsl:if test="text()"><p><xsl:apply-templates/></p></xsl:if>
    </td></tr>
</xsl:template>

<xsl:template match="markupResp">
    <tr><th align="right" valign="top">Markup by</th>
	<td>
	<xsl:if test="@who">
	    <xsl:text>Responsibility: </xsl:text>
	    <xsl:choose>
		<xsl:when test="@who='vendor'">Vendor</xsl:when>
		<xsl:when test="@who='dlps'">DLPS</xsl:when>
		<xsl:when test="@who='vendor; dlps'">Vendor; DLPS</xsl:when>
		<xsl:otherwise><xsl:value-of select="@who"/></xsl:otherwise>
	    </xsl:choose>
	</xsl:if>
	<xsl:if test="@how"><br/>Name: <xsl:value-of select="@how"/></xsl:if>
	<xsl:if test="text()"><p><xsl:apply-templates/></p></xsl:if>
    </td></tr>
</xsl:template>

<xsl:template match="reason">
    <tr><th align="right" valign="top">Reason</th><td><xsl:apply-templates/></td></tr>
</xsl:template>

<xsl:template match="cf">
    <tr><th align="right" valign="top">See also</th><td>
	<xsl:apply-templates/>
    </td></tr>
</xsl:template>


<!-- POINTERS -->

<xsl:template match="ptr">
    <xsl:variable name="target"><xsl:value-of select="@target"/></xsl:variable>

    <xsl:if test="local-name(..)='cf' and preceding-sibling::ptr">
	<!-- not first <ptr/> within <cf>; precede hyperlink with line break -->
	<br/>
    </xsl:if>

    <a>
	<xsl:attribute name="href">#<xsl:value-of select="$target"/></xsl:attribute>

	<xsl:choose>
	    <xsl:when test="//practiceDoc[@id=$target]">
		<xsl:apply-templates select="//practiceDoc[@id=$target]/rs" mode="string"/>
	    </xsl:when>
	    <xsl:otherwise>
		<xsl:call-template name="getCatLabel">
		    <xsl:with-param name="string"><xsl:value-of select="$target"/></xsl:with-param>
		</xsl:call-template>
	    </xsl:otherwise>
	</xsl:choose>
    </a>
</xsl:template>

<xsl:template match="ref">
    <a>
	<xsl:attribute name="href">#<xsl:value-of select="@target"/></xsl:attribute>
	<xsl:apply-templates/>
    </a>
</xsl:template>

<xsl:template match="xref">
    <xsl:choose>
	<xsl:when test="@type='external'">
	    <!-- link should open a new window; use '_blank' -->
	    <a target="_blank">
		<xsl:attribute name="href"><xsl:value-of select="@url"/></xsl:attribute>
		<xsl:apply-templates/>
	    </a>
	</xsl:when>
	<xsl:otherwise>
	    <!-- assume this is a page-image example; use 'examples' window -->
	    <a target="examples">
		<xsl:attribute name="href"><xsl:value-of select="@url"/></xsl:attribute>
		<xsl:apply-templates/>
	    </a>
	</xsl:otherwise>
    </xsl:choose>
</xsl:template>


<!-- PHRASE-LEVEL ELEMENT TEMPLATES -->

<xsl:template match="hi">
    <xsl:choose>
	<xsl:when test="@rend='italic'">
	    <i><xsl:apply-templates/></i>
	</xsl:when>
	<xsl:when test="@rend='bold'">
	    <b><xsl:apply-templates/></b>
	</xsl:when>
	<xsl:when test="@rend='revised'">
	    <span class="revised"><xsl:apply-templates/></span>
	</xsl:when>
	<xsl:otherwise>
	    <xsl:apply-templates/>
	</xsl:otherwise>
    </xsl:choose>
</xsl:template>

<xsl:template match="gi | tag">
    <xsl:choose>
	<xsl:when test="@tei='no'">
	    <span class="mono"><i>&lt;<xsl:value-of select="."/>&gt;</i></span>
	</xsl:when>
	<xsl:otherwise>
	    <span class="mono">&lt;<xsl:value-of select="."/>&gt;</span>
	</xsl:otherwise>
    </xsl:choose>
</xsl:template>

<xsl:template match="xpath">
    <span class="mono"><xsl:value-of select="."/></span>
</xsl:template>

<xsl:template match="att">
    <xsl:choose>
	<xsl:when test="@tei='no'">
	    <span class="mono"><i><xsl:value-of select="."/></i></span>
	</xsl:when>
	<xsl:otherwise>
	    <span class="mono"><xsl:value-of select="."/></span>
	</xsl:otherwise>
    </xsl:choose>
</xsl:template>

<xsl:template match="val">
    <span class="mono">"<xsl:value-of select="."/>"</span>
</xsl:template>

</xsl:stylesheet>
