#!/usr/bin/perl -w

# refresh_proofreader - renumbers page breaks and copies input file to Proofreader directory

# Greg Murray <gpm2a@virginia.edu>
# Written: 2003-01-14
# Last modified: 2005-10-19

# 2003-04-08: gpm2a: Changed call to pb_entities to use -p option
# (Proofreader mode).
#
# 2004-04-20: gpm2a: Added call to declare_entities.
#
# 2004-06-03: gpm2a: Allowed cavdaily_\d{8} filenames.
#
# 2004-07-12: gpm2a: Changed path to proofreader directory.
#
# 2004-09-01: gpm2a: Changed to allow any filename that begins with a
# DLPS ID or ends with a 3-character extension
#
# 2005-10-19: gpm2a: Script now makes its own backup of the original
# input file, rather than simply making system() calls resulting in a
# .bak file for only the last system() call. This approach is the same
# one used in 'postkb' script.


use strict;
use File::Copy;
use lib '/shares/admin/bin/text';
use DlpsText;

my ($me, $dir, $usage, $infile, $id, @infile, $tempfile, $dest_dir, $source_file, $dest_file);

#----------------------------------------------------------------------
# 'constants'

my $PROOFREADER = "/www/doc/dlps/uva-only/proofreader/images/";
#----------------------------------------------------------------------

$me = "refresh_proofreader";

if (-d $PROOFREADER) {
    $dir = $PROOFREADER;
} else {
    die "$me: ERROR: '$PROOFREADER' is not a directory\n";
}

$usage = <<EOD;

$me - renumbers page breaks and copies input file to Proofreader directory
Usage: $me filenames
In: TEI XML file(s)
Out: Copies each input file to [filename].bak, then overwrites original input file

EOD

die $usage if (! @ARGV);
foreach (@ARGV) {
    die $usage if /^-/;   # this script has no switches
}

foreach $infile (@ARGV) {
    # determine DLPS ID
    if ( $infile =~ /^([bz]\d{9}|[cC]av[dD]aily_\d{8})/ ) {
	$id = $&;
    } elsif ( $infile =~ /^(.+?)\.\w{3}$/ ) {
	$id = $1;
    } else {
	die "$me: $infile: ERROR: Bad filename: Cannot determine ID from filename.\n";
    }

    # read input file
    open(IN, $infile) || die "$me: ERROR: Cannot read '$infile': $!\n";
    @infile = <IN>;
    close IN;

    # make sure you'll be able to write a .bak file after scripts have run
    open(BAK, ">${infile}.bak") || die "$me: ERROR: Cannot write '${infile}.bak': $!\n";
    print BAK "\n";
    close BAK;

    # make temporary backup of original input file for added safety
    $tempfile = DlpsText::getTempFileName($infile);
    open(BAK, ">$tempfile") || die "$me: ERROR: Cannot write '$tempfile': $!\n";
    foreach (@infile) {
	print BAK;
    }
    close BAK;

    # renumber entity attributes on pb tags
    system("pb_entities -p $infile");

    # refresh <!ENTITY ... SYSTEM ... NDATA ...> declarations
    system("declare_entities $infile");

    # make backup of original input file, overwriting .bak file from last system() call
    open(BAK, ">${infile}.bak") || die "$me: ERROR: Cannot write '${infile}.bak': $!\n";
    foreach (@infile) {
	print BAK;
    }
    close BAK;

    # delete temporary file
    unlink $tempfile;

    # copy XML file to destination directory
    $dest_dir = $dir . $id . "/";
    $source_file = $infile;
    $dest_file = $dest_dir . $infile;
    copy($source_file, $dest_file)
	or warn "$me: $infile: WARNING: Could not copy '$source_file' to '$dest_file': $!\n";
}
