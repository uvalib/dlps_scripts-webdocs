#!/usr/bin/perl -w -I /shares/admin/bin/text

# UNK2unknown - converts vendor [UNK] unknown character indicators to &unknown; entity references

# Greg Murray <gpm2a@virginia.edu>
# Written: 2004-03-25

use strict;
##use DlpsText;

my ($me, $usage, $infile, @infile, $isEntityDeclared, $go);

$me = 'UNK2unknown';
$usage = <<EOD;

$me - converts vendor [UNK] unknown character indicators to &unknown; entity references
Usage: $me filenames
In: TEI XML file(s)
Out: Copies each input file to [filename].bak, then overwrites original input file

EOD

die $usage if (! @ARGV);
foreach (@ARGV) {
    die $usage if /^-/;   # this script has no switches
}

foreach $infile (@ARGV) {
    $isEntityDeclared = 0;
    $go = 0;

    # read input file
    open(IN, $infile) || die "$me: ERROR: Cannot read '$infile': $!\n";
    @infile = <IN>;
    close IN;

    # test whether any changes are needed
    foreach (@infile) {
	if ( /\[UNK\]/ ) {
	    $go = 1;
	    last;
	}
    }

    # skip to next input file if no changes are needed
    if (not $go) {
	next;
    }

    # make backup
    open(BAK, ">${infile}.bak") || die "$me: ERROR: Cannot write '${infile}.bak': $!\n";
    foreach (@infile) {
	print BAK;
    }
    close BAK;

    # make changes, overwriting input file
    open(OUT, ">$infile") || die "$me: ERROR: Cannot write '$infile': $!\n";
    foreach (@infile) {
	if ( /<!ENTITY\s+unknown\s[^>]+?>/ ) {
	    # substitute vendor's declaration with our own
	    s/<!ENTITY\s+unknown\s[^>]+?>/<!ENTITY unknown "[unknown character]">/;
	    $isEntityDeclared = 1;
	}

	if ( /^\]>/ ) {
	    # end of internal subset; add declaration for entity 'unknown' if needed
	    if (not $isEntityDeclared) {
		print OUT "\n" . '<!ENTITY unknown "[unknown character]">' . "\n";
	    }
	}

	# replace [UNK] with &unknown;
        s/\[UNK\]/&unknown;/g;

	print OUT;
    }
    close OUT;

    ##DlpsText::log($me, $infile, 'Converted vendor [UNK] unknown character indicators to &unknown; entity references');
}
