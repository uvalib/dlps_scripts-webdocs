#!/usr/bin/perl -w

# replace_teixlite - replaces DOCTYPE declaration (if declaring
# teixlite.dtd) to declare uva-dl-tei TEI P4 DTD, and replaces ENTITY
# declarations for expected character entity sets

# Greg Murray <gpm2a@virginia.edu>
# Written: 2007-07-17
# Last modified: 2007-07-17


use strict;

my ($me, $usage, $doctype);
my ($infile, @infile, $inDoctype, $inSubset, @buffer, $temp, $line);

$doctype = <<EOD;
<!DOCTYPE TEI.2 SYSTEM "http://text.lib.virginia.edu/dtd/tei/tei-p4/tei2.dtd" [
<!ENTITY % POSTKB "INCLUDE">
<!ENTITY % TEI.extensions.ent SYSTEM "http://text.lib.virginia.edu/dtd/tei/uva-dl-tei/uva-dl-tei.ent">
<!ENTITY % TEI.extensions.dtd SYSTEM "http://text.lib.virginia.edu/dtd/tei/uva-dl-tei/uva-dl-tei.dtd">
EOD

$me = 'replace_teixlite';
$usage = <<EOD;

$me - replaces DOCTYPE declaration (if declaring teixlite.dtd)
  to declare uva-dl-tei TEI P4 DTD, and replaces ENTITY declarations
  for expected character entity sets
Usage: $me filenames
In: TEI XML file(s)
Out: Copies each input file to [filename].bak, then overwrites original input file

EOD

die $usage if (! @ARGV);

foreach $infile (@ARGV) {
    $inDoctype = 0;
    $inSubset = 0;
    @buffer = ();

    # read input file
    open(IN, $infile) || die "$me: ERROR: Cannot read '$infile': $!\n";
    @infile = <IN>;
    close IN;

    # make backup
    open(BAK, ">${infile}.bak") || die "$me: ERROR: Cannot write '${infile}.bak': $!\n";
    foreach (@infile) {
	print BAK;
    }
    close BAK;

    # make changes, overwriting input file
    open(OUT, ">$infile") || die "$me: ERROR: Cannot write '$infile': $!\n";
    foreach (@infile) {
	if ( /^\s*<!DOCTYPE\s+[^>]+teixlite\.dtd/i ) {
	    $inDoctype = 1;
	}

	if ( $inDoctype ) {
	    if ( /\[/ ) {
		$inSubset = 1;
		push @buffer, $';
		next;
	    }
	    if ( /\]/ ) {
		$inSubset = 0;
		push @buffer, $`;
	    }

	    # retain the original document's internal subset in a buffer
	    if ( $inSubset ) {
		push @buffer, $_;
	    }

	    if ( />/ && ! $inSubset ) {
		# end of DOCTYPE declaration
		$inDoctype = 0;
		$temp = $';

		# print new DOCTYPE declaration
		print OUT $doctype;

		# remove expected character-entity-set stuff from buffer
		foreach $line (@buffer) {
		    # remove declarations of expected character entity sets
		    $line =~ s/<!ENTITY\s+%\s+iso[-_]?(dia|grk1|grk2|grk3|grk4|lat1|lat2|num|pub|tech)[^>]+>\s*//i;
		    # remove expected character entity sets
		    $line =~ s/%iso[-_]?(dia|grk1|grk2|grk3|grk4|lat1|lat2|num|pub|tech);\s*//i;

		    $line =~ s/\[//;     # remove [ from buffer
		    $line =~ s/\]//;     # remove ] from buffer
		    $line =~ s/^\s*$//;  # remove blank lines from buffer
		}

		print OUT @buffer, ']>', $temp;
		next;
	    }
	} else {
	    # not within DOCTYPE
	    print OUT;
	}
    }
    close OUT;

    # call declare_charents script to declare/insert any undeclared
    # character-entity-set files (like iso-lat1.ent, etc.)
    system("declare_charents -B $infile");
}
