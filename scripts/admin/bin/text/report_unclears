#!/usr/bin/perl -w -I /shares/admin/bin/text

# report_unclears - generates an HTML report/form of <unclear> and <gap/> tags

# Greg Murray <gpm2a@virginia.edu>
# Written: 2002-03-22
# Last modified: 2005-12-30

# 2003-04-01: gpm2a: Script is now smart enough to report multiple
# unclears and/or gaps on the same line.
#
# 2003-07-16: gpm2a: Added logic to exclude gaps for non-Western
# characters, since these don't require investigation and shouldn't be
# reported. For this to work, the gaps must be marked with desc="..."
# set to the language ID of the language being omitted from the
# transcription, e.g. <gap desc="chi" reason="editorial"/> for
# Chinese.
#
# 2004-03-04: gpm2a: Added a test to check 'id' attribute on
# unclear/gap tags: must be present and have a value -- otherwise,
# it's a fatal error, because submitting the web report will fail if
# there are no IDs. Also changed output of two-lines-of-context to use
# <code> rather than <pre>, so the context will wrap within the table
# cell.
#
# 2005-12-30: gpm2a: Changed for use on pogo.

use strict;
##use DlpsText;
use DlpsTextWorkreports;

our ($me, $infile);  # declare these variables as 'our' to allow DlpsTextWorkreports to access them
my ($usage, @infile);
my ($report_type, $go, $msg, $c);
my ($pagenumber, $pageimage, $id);
my ($html1, $html2, $html3);
my (%langs, $unclears, $gaps, $hit_type, $i, $el, $el_c, $test, $buffer, $match);
my ($element, $q, $context, $prevline);

$report_type = 'unclears';

$me = 'report_unclears';
$usage = <<EOD;

$me - generates an HTML report/form of <unclear> and <gap/> tags
Usage: $me filenames
In: TEI XML file(s)
Out: For each input file, creates an HTML file named [filename].unclears.html

EOD

die $usage if (! @ARGV);
foreach (@ARGV) {
    die $usage if /^-/;   # this script has no switches
}

foreach $infile (@ARGV) {
    if ( not DlpsTextWorkreports::init($infile, $report_type) ) {
	next;
    }

    # test for existing changes file; if problem, skip to next input file; see DlpsTextWorkreports::changes_file_ok()
    if ( not DlpsTextWorkreports::changes_file_ok() ) {
	next;
    }

    # read input file into an array
    open(IN, $infile) || die "$me: Cannot read '$infile': $!\n";
    @infile = <IN>;
    close IN;

    # get language IDs; these are used to exclude gaps for non-Western
    # characters, e.g. to skip <gap desc="chi" reason="editorial"/>
    foreach (@infile) {
	if ( /<language [^>]*id=("|')([^\1]+?)\1/ ) {
	    $langs{$2} = '';
	}
    }
    # add language-related desc values you know you always want to exclude
    $langs{'chi'} = '';
    $langs{'Chinese characters'} = '';

    # test whether any of this is necessary
    $go = 0; $msg = '';
    foreach (@infile) {
	if ( /<unclear/ ) {
            if ( /<unclear[^>]*id=("|')([^\1]+)\1/ ) {
	        $go = 1; last;
            } else {
                $msg = "ERROR: <unclear> tag with no id= attribute. Cannot generate HTML report for '$infile'.\n";
                last;
            }
	}
        if ( /<gap/ ) {
            if ( /<gap[^>]*id=("|')([^\1]+)\1/ ) {
	        # proceed to desc= test below
            } else {
                $msg = "ERROR: <gap> tag with no id= attribute. Cannot generate HTML report for '$infile'.\n";
                last;
            }

            if ( /<gap [^>]*desc=("|')([^\1]+?)\1/ ) {
                if ( not exists($langs{$2}) ) {
                    $go = 1; last;
                }
            } else {
                $go = 1; last;
            }
        }
    }
    if (! $go) {
        if (not $msg) {
	    $msg = "Contains no unclears or gaps. No HTML report was generated.";
        }
	print "$me: $infile: $msg\n";
	##DlpsText::log($me, $infile, $msg);
	next;
    }

    $c = 0;
    $unclears = 0;
    $gaps = 0;
    $pagenumber = '';
    $pageimage = '';
    $html2 = '';

    foreach (@infile) {
	if (/<pb.*>/i) {
	    if (/<pb.+n=["'](\w+)["'].*>/i) {
		$pagenumber = $1;
	    } else {
		$pagenumber = '';
	    }

	    if (/<pb.+entity=["'](\w+)["'].*>/i) {
		$pageimage = $1;
	    } else {
		$pageimage = '';
	    }
	}

	if ( /<unclear/ or /<gap/ ) {
	    $hit_type = '';
	    # check this line twice: once for unclears, once for gaps
	    for ($i = 1; $i <= 2; $i++) {
		if ($i == 1) {
		    $el = 'unclear';
                    $el_c = $unclears;
		    $hit_type = 'unclear';
		} else {
		    $el = 'gap';
                    $el_c = $gaps;
		    $hit_type = 'gap';
		}

		if ( /<$el/ ) {
		    $test = $_;
		    $buffer = '';
		    while ( $test =~ m:(<$el[^/>]*?/>|<$el[^/>]*?>.*?</$el>): ) {
			$match = $&;
			$buffer .= $`;
			$test = $';

		        # get id
		        if ( $match =~ /<$el[^>]*id=("|')([^\1]+)\1/ ) {
		            $id = $2;
		        } else {
		            $id = '';
		        }

	                $c++; $el_c++;

                        # test for language-related gap (where desc is a language ID); if so, skip
                        if ($hit_type eq 'gap') {
                            if ( $match =~ /<$el[^>]*desc=("|')([^\1]+?)\1/ ) {
                                if ( exists($langs{$2}) ) {
                                    $c--; $el_c--; next;
                                }
                            }
                        }

		        # get entire element
	                $element = $match;
		        $element =~ s/</&lt;/g;
		        $element =~ s/>/&gt;/g;

                        if ( $element =~ /"/ ) {
		            $q = "'";
		            $element =~ s/'/&apos;/g;
	                } else {
		            $q = '"';
	                }

	                $context = $prevline . $_;
	                $context =~ s/</&lt;/g;
	                $context =~ s/>/&gt;/g;
                        chomp $context;
	                $context =~ s/\n/<br>\n/g;

	                $html2 .= <<EOD;
<tr>
<td rowspan="2">$c</td>
<td><input type="checkbox" name="change_$c" value="on"> 
Replace <span class="mono">$element</span><input type="hidden" name="id_$c" value="$id">
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
with: <input type="text" class="mono" name="new_$c" size="50" value=$q$element$q></td>
<td>Mark this item for further review:<br>
Note:&nbsp;<input type="text" class="text" name="note_$c"></td>
<td>$pagenumber<input type="hidden" name="pagenumber_$c" value="$pagenumber"><br>
$pageimage<input type="hidden" name="pageimage_$c" value="$pageimage"></td>
</tr>
<tr><td colspan="3"><code>$context</code></td></tr>
EOD
	            } # end while
		    $buffer .= $test;
		    $_ = $buffer;
                    if ($i == 1) { $unclears = $el_c; } else { $gaps = $el_c; }
		}
	    }
	}

	$prevline = $_;
    }

    $html1 = <<EOD;
<html>
<head>
<title>Unclears Report: $infile</title>
<link rel="stylesheet" type="text/css" href="/dlps/css/workreports.css">
</head>
<body onLoad="document.frm.operator.focus();">
<h3>Unclears Report: $infile</h3>
<p><b>Summary:</b> $c items ($unclears unclears and $gaps gaps)</p>
<h4>Instructions</h4>
<ol>
<li>Enter your name.</li>
<li>For each item, determine whether the passage really is illegible
(for &lt;unclear>) or missing (for &lt;gap/>).</li>
<li>For &lt;unclear&gt; items:

  <ul>
  <li>If the passage is illegible in the print source (or page image)
  and you cannot determine what the word(s) should be, the passage
  should be marked with an empty unclear element:
  <b>&lt;unclear/&gt;</b></li>

  <li>If the passage is partially legible and you can make a
  reasonable determination as to what the word(s) should be, the
  passage should be wrapped in an unclear element:
  <b>&lt;unclear&gt;your phrase here&lt;/unclear&gt;</b></li>

  <li>If the passage is fully legible, do not use the &lt;unclear&gt;
  markup at all: <b>your phrase here</b></li>
  </ul>

</li>
<li>If a correction is needed, check the "Replace" checkbox and enter
the correction in the textbox. (If no change is needed, leave the
"Replace" checkbox empty.)</li>
<li>If the passage appears problematic or requires manual editing,
mark it for further review by entering a brief note of explanation in
the "Note" textbox.</li>
<li>When finished with all items, click the "Save Data" button.</li>
</ol>

<form name="frm" method="post" action="$DlpsTextWorkreports::action">

<table border="0" cellpadding="5">
<tr>
<td>Name <i>(required)</i>: <input type="text" class="text" name="operator"></td>
</tr>
</table>

<table border="1" cellpadding="5">
<tr><th>Item</th><th>Correction</th><th>Review</th><th>Page number/image</th></tr>
EOD

    $html3 = DlpsTextWorkreports::html_end($c);

    # write output file
    DlpsTextWorkreports::write_outfile($html1, $html2, $html3);

    # create empty .change and .review files
    DlpsTextWorkreports::create_empties();

    $msg = "No changes to input file. Generated HTML report: " . DlpsTextWorkreports::get_outfile();
    ##DlpsText::log($me, $infile, $msg);
}
