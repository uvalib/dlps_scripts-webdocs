#!/usr/bin/perl -w

# listBaseNames - outputs a list of base filenames

# Greg Murray, murray@virginia.edu
# Written: 2002-04-16
# Last modified: 2005-01-14

# 2005-01-14: gpm2a: Re-wrote script pretty much entirely.

# Lists base filenames in the current directory. What consitutes a
# "base" name is determined by the regular expression passed.

# In: First argument must be the regular expression to use when
# determining which part of the filename is the base. Subsequent
# arguments should be filenames to inspect.

# The reg exp may be entered as 'm/regexp/' or '/regexp/' or 'regexp'.

# Out: Writes to standard output.

# Example:
# If invoked like this...
#   listBaseNames '/^eaf\d{3}(v\d)?/' eaf*
# in a directory with these filenames...
#   eaf001_admin.xml
#   eaf001_desc.xml
#   eaf002v1_admin.xml
#   eaf002v1_desc.xml
# the script will produce this list:
#   eaf001
#   eaf002v1


use Getopt::Std;
use strict;

my ($me, $usage, %opts, $regexp, $delim);
my (%list, $value, $out);

$me = 'listBaseNames';
$usage = <<EOD;

$me - outputs a list of base filenames

Usage: $me [-d delimiter] [-r regexp | -x extension] filenames

  -d (delimiter)  Delimiter character(s) to place between each list
       item. Use \\t for tab, \\n for newline. Defaults to newline.

  -r (regular expression)  List base filenames by using the regular
       expression specified. The reg exp may be entered as 'm/regexp/'
       or '/regexp/' or 'regexp'.

  -x (extension)  List base filenames by trimming the filename
       extension specified.

In: Any filenames
Out: Prints list to standard output

Notes: If neither -r nor -x are specified, the script will determine
  the base filename by trimming any 3- or 4-letter filename extension.

Examples:
  $me *.txt                         List .txt files minus the .txt extension
  $me -x '.txt' *.txt               Same as above
  $me -r '[bz]\\d{9}' -d '\\t' *.xml  List .xml files starting with b or z plus 9 digits, tab-delimited

EOD

# get arguments; check usage
getopts('d:r:x:', \%opts) || die $usage;
die $usage if (! @ARGV);
if ($opts{r} and $opts{x}) { die "Options -r and -x are mutually exclusive.$usage"; }

$regexp = $opts{r} || '';
$delim = $opts{d} || "\n";
$delim =~ s/\\t/\t/;
$delim =~ s/\\n/\n/;

# remove m// or // operator on regular expression, if present
$regexp =~ s/^m?\///;
$regexp =~ s/\/$//;

foreach (@ARGV) {
    if ($regexp) {
	if ( /$regexp/ ) {
	    # plug matched expression into hash as key, to produce list of unique values
	    $list{$&} = $&;
	}
    } elsif ( $opts{x} ) {
	if ( /(.+?)$opts{x}$/ ) {
	    $list{$1} = $1;
	}
    } else {
	if ( /(.+?)\.\w{3,4}$/ ) {
	    $list{$1} = $1;
	}
    }
}

$out = '';
foreach $value ( sort(values(%list)) ) {
    $out .= "$value$delim";
}
$out =~ s/$delim$//; # trim final delimiter character(s)

print "$out\n";
