#!/usr/bin/perl -w

# note ids - adds id attribute on <note> if missing (except in TEI header)

# Greg Murray <gpm2a@virginia.edu>
# Written: 2009-01-14

use strict;
#use Getopt::Std;

my ($me, $usage, $infile, @infile, $c, $in_teiHeader, $note_tag);

$me = 'note_ids';
$usage = <<EOD;

$me - adds id attribute on <note> if missing (except in TEI header)
Usage: $me filenames
In: TEI XML file(s)
Out: Copies each input file to [filename].bak, then overwrites original input file.
Notes:
  - The id values for the <note> elements consist of the string 'note'
    followed by a sequence number, as in id="note1", id="note2", etc.
  - Any existing <note> id values are retained

EOD

#getopts('D', \%opts) || die $usage;
die $usage if (! @ARGV);
foreach (@ARGV) {
    die $usage if /^-/;   # this script has no switches
}

foreach $infile (@ARGV) {
    $c = 0;
    $in_teiHeader = 0;

    # read input file
    open(IN, $infile) || die "$me: ERROR: Cannot read '$infile': $!\n";
    @infile = <IN>;
    close IN;

    # make backup
    open(BAK, ">${infile}.bak") || die "$me: ERROR: Cannot write '${infile}.bak': $!\n";
    foreach (@infile) {
	print BAK;
    }
    close BAK;

    # make changes, overwriting input file
    open(OUT, ">$infile") || die "$me: ERROR: Cannot write '$infile': $!\n";
    foreach (@infile) {
	if ( /<teiHeader/ ) {
	    $in_teiHeader = 1;
	}
	if ( m:</teiHeader: ) {
	    $in_teiHeader = 0;
	}
	if ( $in_teiHeader ) {
	    print OUT;
	    next;
	}

	if ( /(<note[^>]*?>)/ ) {
	    $note_tag = $1;
	    if ( $note_tag =~ / id=/ || $note_tag =~ / target=/ ) {
		# skip
	    } else {
		$c++;
		s/<note/<note id="note$c"/;
	    }
	}

	print OUT;
    }
    close OUT;
}
