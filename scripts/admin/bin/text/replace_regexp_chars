#!/usr/bin/perl -w -I /shares/admin/bin/text

# replace_regexp_chars - replaces regular expression characters
# (namely parentheses and square brackets) with entity references (to
# facilitate processing files with Perl regular expressions)

# Greg Murray <gpm2a@virginia.edu>
# Written: 2004-02-03

use strict;
##use DlpsText;

my ($me, $usage, $infile, @infile, $go, $msg);

$me = 'replace_regexp_chars';
$usage = <<EOD;

$me - replaces regular expression characters
  (namely parentheses and square brackets) with entity references (to
  facilitate processing files with Perl regular expressions)
Usage: $me filenames
In: TEI XML file(s)
Out: Copies input file to [filename].bak, then overwrites input file
Note: Starts replacing after the close of the teiHeader element

EOD

die $usage if (! @ARGV);

foreach $infile (@ARGV) {
    $go = 0;

    # read input file
    open(IN, $infile) || die "$me: ERROR: Cannot read '$infile': $!\n";
    @infile = <IN>;
    close IN;

    # make backup
    open(BAK, ">${infile}.bak") || die "$me: ERROR: Cannot write '${infile}.bak': $!\n";
    foreach (@infile) {
	print BAK;
    }
    close BAK;

    # make changes, overwriting input file
    open(OUT, ">$infile") || die "$me: ERROR: Cannot write '$infile': $!\n";
    # read each line of this input file
    foreach (@infile) {
	if ( m:</teiHeader>: ) { $go = 1; }
	if ($go) {
	    s/\(/&lpar;/g;
	    s/\)/&rpar;/g;
	    s/\[/&lsqb;/g;
	    s/\]/&rsqb;/g;
	}
	print OUT;
    }
    close OUT;

    $msg = 'Replaced ( ) [ ] characters with character entities.';
    ##DlpsText::log($me, $infile, $msg);
}
