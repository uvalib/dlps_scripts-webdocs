#!/usr/bin/perl -w -I /shares/admin/bin/text

# restore_regexp_chars - replaces character entities &lpar; &rpar;
# &lsqb; &rsqb; with ( ) [ ] respectively (reverses the substitutions
# made by replace_regexp_chars)

# Greg Murray <gpm2a@virginia.edu>
# Written: 2004-02-04

use strict;
##use DlpsText;

my ($me, $usage, $infile, @infile, $msg);

$me = 'restore_regexp_chars';
$usage = <<EOD;

$me - replaces character entities &lpar; &rpar;
  &lsqb; &rsqb; with ( ) [ ] respectively (reverses the substitutions
  made by replace_regexp_chars)

Usage: $me filenames
In: TEI XML file(s)
Out: Copies input file to [filename].bak, then overwrites input file

Note: This script is run at the end of the DLPS post-keyboarding
  process, to restore characters previously "escaped" with character
  entities to facilitate processing XML files with Perl regular
  expressions.

EOD

die $usage if (! @ARGV);

foreach $infile (@ARGV) {
    # read input file
    open(IN, $infile) || die "$me: ERROR: Cannot read '$infile': $!\n";
    @infile = <IN>;
    close IN;

    # make backup
    open(BAK, ">${infile}.bak") || die "$me: ERROR: Cannot write '${infile}.bak': $!\n";
    foreach (@infile) {
	print BAK;
    }
    close BAK;

    # make changes, overwriting input file
    open(OUT, ">$infile") || die "$me: ERROR: Cannot write '$infile': $!\n";
    # read each line of this input file
    foreach (@infile) {
	s/&lpar;/\(/g;
	s/&rpar;/\)/g;
	s/&lsqb;/\[/g;
	s/&rsqb;/\]/g;
	print OUT;
    }
    close OUT;

    $msg = 'Restored character entities &lpar; &rpar; &lsqb; &rsqb; with ( ) [ ] characters.';
    ##DlpsText::log($me, $infile, $msg);
}
